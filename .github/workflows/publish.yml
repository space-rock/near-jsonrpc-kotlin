name: Release Please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      paths_released: ${{ steps.release-please.outputs.paths_released }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}.${{ steps.release.outputs.patch }}
    
    steps:
      - name: Run Release Please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          release-type: simple
          package-name: near-jsonrpc-kotlin
          bump-minor-pre-major: true
          bump-patch-for-minor-pre-major: true

  publish-release:
    name: Publish Release Assets
    runs-on: ubuntu-latest
    needs: release-please
    if: needs.release-please.outputs.release_created == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'scripts/requirements.txt'

      - name: Install Python dependencies
        run: |
          cd scripts
          pip install -r requirements.txt

      - name: Generate Kotlin code from OpenAPI spec
        run: |
          cd scripts
          bash codegen.sh

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Validate Gradle Project
        run: |
          echo "🔍 Validating Gradle Project..."
          ./gradlew clean build test
          echo "✅ Package validation successful"

      - name: Build documentation
        continue-on-error: true
        run: |
          echo "📚 Building documentation with Dokka..."
          ./gradlew dokkaHtml || echo "⚠️ Dokka documentation generation not configured"

      - name: Create Release Archive
        id: archive
        run: |
          VERSION="${{ needs.release-please.outputs.version }}"
          ARCHIVE_NAME="near-jsonrpc-kotlin-${VERSION}.zip"
          
          # Build JARs
          ./gradlew assemble
          
          # Create archive with source and built artifacts
          zip -r "${ARCHIVE_NAME}" \
            types/build/libs/ \
            client/build/libs/ \
            types/src/ \
            client/src/ \
            build.gradle.kts \
            settings.gradle.kts \
            README.md \
            LICENSE \
            -x "*.DS_Store" \
            -x "**/build/tmp/*" \
            -x "**/build/classes/*"
          
          echo "archive_name=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT
          echo "✅ Created release archive: ${ARCHIVE_NAME}"

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ needs.release-please.outputs.tag_name }} \
            ${{ steps.archive.outputs.archive_name }} \
            --clobber

      - name: Trigger JitPack Build
        continue-on-error: true
        run: |
          echo "🚀 Triggering JitPack build..."
          TAG="${{ needs.release-please.outputs.tag_name }}"
          # Extract repository from GITHUB_REPOSITORY
          REPO="${{ github.repository }}"
          curl -s "https://jitpack.io/com/github/${REPO}/${TAG}/build.log" || true
          echo "📦 JitPack will build the package on first request"
          echo "📝 Add to your build.gradle.kts:"
          echo "   repositories {"
          echo "       maven { url = uri(\"https://jitpack.io\") }"
          echo "   }"
          echo "   dependencies {"
          echo "       implementation(\"com.github.${REPO}:types:${TAG}\")"
          echo "       implementation(\"com.github.${REPO}:client:${TAG}\")"
          echo "   }"

      - name: Release Summary
        run: |
          echo "🎉 Release ${{ needs.release-please.outputs.tag_name }} published successfully!"
          echo "📦 Package URL: https://github.com/${{ github.repository }}"
          echo "🏷️ Tag: ${{ needs.release-please.outputs.tag_name }}"
          echo "📝 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.release-please.outputs.tag_name }}"
          echo "🔗 JitPack URL: https://jitpack.io/#${{ github.repository }}/${{ needs.release-please.outputs.tag_name }}"
